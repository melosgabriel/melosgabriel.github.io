:toc: left
:source-highlighter: pygments
:stem:
:icons: font
:sectnums:
:figure-caption: Figura

= Laplaciano do Gaussiano
Sexto Projeto da Disciplina de Processamento Digital de Imagens - Gabriel de Melo Souza

== Objetivo ==
Esse projeto visa nos permitir aprender mais sobre um filtro que realça bordas e detalhes em objetos: O filtro laplaciano do gaussiano.

== O Laplaciano do Gaussiano ==
Como vimos nas aulas da disciplina, o filtro Laplaciano é um filtro que implementa uma derivada de segunda ordem da imagem, dessa forma detectando regiões de alta variação de cor, ou seja, bordas. Geralmente o filtro Laplaciano é aplicado após passarmos um filtro suavizante, para eliminarmos os ruídos. Um exemplo de filtro suavizante é o filtro Gaussiano.

O filtro gaussiano pode ser equacionado como uma distribuição normal, e pode ser implementado digitalmente com um kernel: 

stem:[G_\sigma (x,y) = \frac{1}{\sqrt{2*\pi*\sigma^2}}*e^({\frac{-(x^2+y^2)}{2*\sigma^2}}) \Leftrightarrow ] stem:[\begin{bmatrix}
1 & 2 & 1\\ 
2 & 4 & 2\\ 
1 & 2 & 1
\end{bmatrix}]

Quando aplicamos o laplaciano (stem:[\nabla ^2 f(x,y)]), obtemos que o laplaciano do gaussiano pode ser equacionado como:

stem:[LoG = \frac{-1}{\pi*\sigma^4}*(1 - \frac{x^2+y^2}{2*\sigma^2} )*e^({\frac{-(x^2+y^2)}{2*\sigma^2}}) ]

que pode ser representado em um kernel 5x5 como:

stem:[\begin{bmatrix} 0 & 0 & 1 & 0 & 0\\  0 & 1 & 2 & 1 & 0\\ 1 & 2 & -16 & 2 & 1\\ 0 & 1 & 2 & 1 & 0\\ 0 & 0 & 1 & 0 & 0 \end{bmatrix}]

Também podemos realizar o filtro laplaciano do gaussiano aplicando, na imagem original, o filtro gaussiano seguido do filtro laplaciano. Aplicaremos os dois e compararemos os resultados.

== Código Base ==
Nosso código tem como base o algoritmo implementado pelo professor Agostinho, disponível http://agostinhobritojr.github.io/tutoriais/pdi/#_filtragem_no_dom%C3%ADnio_espacial_i[aqui]. Explicaremos apenas as funcionalidades adicionais implementadas.

== O Código == 
O link:lapgauss.cpp[código] utilizado é mostrado na listagem abaixo.

.lapgauss.cpp
[source,cpp]
----
include::lapgauss.cpp[]
----

=== Implementando o Filtro Laplaciano do Gaussiano - Modo 1 ===
A primeira forma de implementarmos o filtro laplaciano do gaussiano é aplicarmos o filtro gaussiano seguido do laplaciano. Fazemos isso através do seguinte trecho de código:
[source,cpp]
----
if(lp){
  mask = Mat(3, 3, CV_32F, gauss);
  scaleAdd(mask, 1/16.0, Mat::zeros(3,3,CV_32F), mask1);
  mask = mask1;
  filter2D(frame32f, frameFiltered, frame32f.depth(), mask, Point(1,1), 0);
  mask = Mat(3, 3, CV_32F, laplacian);
  filter2D(frameFiltered, frameFiltered, frame32f.depth(), mask, Point(1,1), 0);
  if (addLG) frameFiltered = frameFiltered + frame32f;
}
----
Os parâmetros ``lp`` e ``addLG`` são variáveis booleanas, cujo valor é alterado quando pressionamos uma tecla. Caso a ``addLG`` seja verdadeiro, somamos a matriz filtrada com a matriz original. Utilizamos a matriz ``mask`` como máscara de convolução (ou kernel). As máscaras são definidas no começo do código. Como sempre é rodado um filtro com uma máscara pré-estabelecida, definimos uma máscara nula (apenas um elemento com valor 1), que não tem efeito na convolução (como um impulso). As máscaras são mostradas abaixo:
[source,cpp]
----
  float media[] = {1,1,1,
				           1,1,1,
				           1,1,1};
  float gauss[] = {1,2,1,
				           2,4,2,
				           1,2,1};
  float horizontal[]={-1,0,1,
					            -2,0,2,
					            -1,0,1};
  float vertical[]={-1,-2,-1,
					           0, 0, 0,
					           1, 2, 1};
  float laplacian[]={ 0,-1, 0,
					           -1, 4,-1,
					            0,-1, 0};
  float lapgauss[]={0,0,1,0,0,
                     0,1,2,1,0,
                    1,2,-16,2,1,
                     0,1,2,1,0,
                     0,0,1,0,0};
  float noMask[] = {0,0,0,
                    0,1,0,
                    0,0,0};
----
As matrizes de entrada e saída são mostradas abaixo. Podemos verificar que o filtro laplaciano do gaussiano realça melhor as bordas que somente o filtro laplaciano sozinho (devido à eliminação do ruído).

.Imagem Capturada - Entrada do Programa
image::in1.png[]

.Filtro Laplaciano
image::out1.png[]

.Filtro Laplaciano do Gaussiano
image::out2.png[]

.Imagens Somadas
image::out3.png[]

Podemos notar um expressivo aumento no contraste e realce nas bordas.

=== Implementando o Filtro Laplaciano do Gaussiano - Modo 2 ===
O segundo modo de implementação é utilizando o kernel 5x5 mostrado anteriormente. Variando os valores de sigma podemos obter outros kernels maiores e resultados mais precisos, mas para comparação nos limitamos apenas à matriz mostrada. Também podemos utilizar uma matriz 9x9, com sigma = 1.4, como a mostrada abaixo:
[source,cpp]
----
  float lapgauss1[]={0,1,1,2,2,2,1,1,0,
                     1,2,4,5,5,5,4,2,1,
                     1,4,5,3,0,3,5,4,1,
                     2,5,3,-12,-24,-12,3,5,2,
                     2,5,0,-24,-40,-24,0,5,2,
                     2,5,3,-12,-24,-12,3,5,2,
                     1,4,5,3,0,3,5,4,1,
                     1,2,4,5,5,5,4,2,1,
                     0,1,1,2,2,2,1,1,0};
----
Os resultados são mostrados abaixo:

.Entrada
image::in4.png[]

.Saída
image::out4.png[]

== Referências == 
Nos baseamos, além do código citado acima, nos seguintes sites:

* http://homepages.inf.ed.ac.uk/rbf/HIPR2/log.htm
* http://fourier.eng.hmc.edu/e161/lectures/gradient/node8.html