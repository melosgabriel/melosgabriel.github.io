:toc: left
:source-highlighter: pygments
:stem:
:icons: font
:sectnums:
:figure-caption: Figura

= Stop Motion
Oitavo Projeto da Disciplina de PDI - Gabriel de Melo Souza

== Objetivo ==
Este exercício nos ajudará a aprofundarmos nos conceitos estudados em exercícios anteriores, como o Tilt-Shift, assim como iniciar nossos estudos com a manipulação de videos utilizando o OpenCV.

== Stop Motion ==
A técnica do Stop Motion consiste em manipular um objeto para que ele pareça se mover sozinho https://en.wikipedia.org/wiki/Stop_motion[^1^]. Muitos filmes feitos com massa de modelar empregaram essa técnica, como a _A Fuga das Galinhas_, _Wallace e Gromit: A Batalha dos Vegetais_ e _A noiva Cadáver_. Essa técnica ser recriada digitalmente: se quisermos que um vídeo nosso aparente estar em StopMotion, basta que excluamos alguns quadros desse vídeo. Os resultados serão mostrados no fim desse tutorial.

.A Fuga das Galinhas
image::A_Fuga_das_Galinhas.jpg[]

== O Código ==
O link:tiltshiftvideo.cpp[código] é mostrado abaixo, e será explicado em seguida.

[source,cpp]
----
include::tiltshiftvideo.cpp[]
----

=== Código Base ===
Tomamos como base o código do Tilt Shift feito no https://melosgabriel.github.io/pdi/7.Tilt-Shift/[exercício anterior]. Aqui apenas serão explicadas as funções adicionais ao código.

=== Manipulando Vídeos ===
Para manipularmos vídeos, isto é, abrir-los, iremos utilizar a classe ``cv::VideoCapture``. Quando passado ao construtor dessa classe uma string, ela irá abrir o vídeo no endereço contido nessa string. No nosso caso, será passado via terminal, como a seguir:
[source,shell]
----
$ ./tiltshiftvideo entrada.avi
----
Para salvarmos um vídeo teremos uma tarefa um pouco mais trabalhosa que apenas utilizar a função ``imwrite()``. Criamos um objeto da classe ``cv::VideoWriter(string nome_do_arquivo, protocolo_de_compressão, fps, tamanho)``. A documentação dessa classe está disponível http://docs.opencv.org/trunk/dd/d9e/classcv_1_1VideoWriter.html[aqui]. O protocolo de compressão pode ser XVid ou MPEG, por exemplo. A taxa de captura ou quantidade de frames por segundo(fps) também deve ser informada, e desse modo temos:
[source,cpp]
----
VideoCapture video(argv[1]);      //Abrindo Arquivo de entrada
VideoWriter output_cap("output.avi", video.get(CV_CAP_PROP_FOURCC), video.get(CV_CAP_PROP_FPS),
               			cv::Size(video.get(CV_CAP_PROP_FRAME_WIDTH), video.get(CV_CAP_PROP_FRAME_HEIGHT))); 
----

=== Taxa do Stop Motion ===
Para realizarmos o efeito do Stop Motion precisamos de uma taxa com a qual os quadros serão descartados. Por exemplo, uma taxa de 3, para o programa, significa que 2 quadros serão descartados e 1 será incluído no resultado final. Também pedimos ao usuário para informar se ele quer que o tempo do vídeo se mantenha constante. Em caso afirmativo, o vídeo parecerá em câmera lenta, e para isso basta repetirmos os quadros enquanto não chega a hora de atualizá-lo (com a taxa do stopmotion). Essas informações são pedidas utilizando as seguintes linhas do código:
[source,cpp]
----
int ratio, counter(0);
cout<<"Qual a razão que você quer no StopMotion?\n"; //Calculando a razão do StopMotion
cin>>ratio;

bool tempo;
cout<<"Manter tempo original? 1 - sim; 0 - Não\n";
cin>>tempo;
----

=== Criando a Janela Para o Ajuste ===
No início do programa, lemos o primeiro quadro do vídeo e pedimos para o usuário ajustar os limites do Tilt-Shift. Utilizamos métodos semelhantes ao do exercício anterior. Para fechar a janela utilizamos a função ``cv::destroyWindow()``. 

image::tela_ajuste.png[]

=== Ajustando o Vídeo Quadro a Quadro ===
[source,cpp]
----
while(1){
	if(!video.read(im)) break;
	counter++;
 	if(counter == ratio){
 		counter = 0;
  		aux = im.clone();
	  	for(int i=0;i<30;i++){
  			filter2D(aux, aux, im.depth(), mask, Point(1,1), 0);
  		}
  		juntar(im,aux);
  		output_cap.write(result);
  	}
  	if(tempo) output_cap.write(result);
}
----
Começamos com um loop infinito ``while(1)``. O primeiro teste é ``if(!video.read(im)) break;``. A função ``read()`` passa para a matriz ``im`` o valor do primeiro quadro de ``video``. Caso isso não aconteça, o vídeo acabou, a função retorna -1 e o teste encerra o loop.

Incrementamos então o valor de um contador. Quando esse contador atingir o valor da taxa informada anteriormente (``if(counter==ratio)``) então executamos os seguintes processos:

* Zerar o contador (recomeçamos a contagem)
* Copiar o quadro para uma matriz auxiliar (``aux = im.clone()``)
* Aplicar um filtro de borramento na matriz auxiliar(x20) (``filter2D``)
* Fazer a soma ponderada das duas imagens
* Escrever o resultado no vídeo de saída (``out.write()``)

Caso o tempo tenha que se manter constate, escrevemos a mesma matriz por diversas vezes, até que o contador atinja o valor da taxa e a matriz de saída deva ser atualizada ``if(tempo) output_cap.write(result);``.

== Código Auxiliar ==
Para cortarmos alguns vídeos retirados do youtube, utizamos o seguinte link:teste.cpp[algoritmo]:

.cortaVideos.cpp
[source,cpp]
----
include::teste.cpp[]
----

Nele, além dos conceitos abordados anteriormente, pegamos a taxa de captura (fps) do vídeo utilizando a seguinte função

[source,cpp]
----
input_cap.get(CV_CAP_PROP_FPS);
----

e a utilizamos para definir um tempo de corte. Se, por exemplo, quisermos cortar um vídeo aos 7 segundos, em um vídeo com 30 fps, aplicamos na seguinte fómula:

stem:[\text{Quadro} = \text{Frame_Rate}*\text{Quantidade_de_Segundos} = 30*7 = 210]

Isso quer dizer que qualquer quadro antes do 210 não será incluído no vídeo final. Isso é feito com a seguinte condição:

[source,cpp]
----
while (true){       
      if (!input_cap.read(frame)) break;
      if ((counter >= 10*input_cap.get(CV_CAP_PROP_FPS) && counter <= 20*input_cap.get(CV_CAP_PROP_FPS)) ||
          (counter >= 35*input_cap.get(CV_CAP_PROP_FPS) && counter <= 40*input_cap.get(CV_CAP_PROP_FPS))){
        output_cap.write(frame);
        //counter =0;
      }
      counter++;
}
----

== Vídeos Utilizados ==
Utilizamos os seguintes vídeos, disponíveis no youtube, para o teste de nossos algoritmos.

.The City - People walking on the street overhead view 
video::26F_EcacVPU[youtube,width=640,height=360]

.Tokyo Stock Footage 
video::LlSPOnQw86A[youtube,width=640,height=360]

== Saída do Programa ==
A seguir são mostrados os vídeos de saída, em tempo normal e acelerado.

.Stop Motion + TiltShift do video The City
video::city_output2.avi[crote,width=640,height=360,opts="autoplay,loop"]

.Stop Motion + TiltShift (acelerado) do video The City
video::city_output2.avi[crote,width=640,height=360,opts="autoplay,loop"]

.Stop Motion + TiltShift do video de Tokyo
video::tokyoOK2.mp4[crote,width=640,height=360,opts="autoplay,loop"]

.Stop Motion + TiltShift (acelerado) do video de Tokyo
video::tokyoOK.mp4[crote,width=640,height=360,opts="autoplay,loop"]

== Resultados 
O mais interessante da saída do nosso programa é que as imagens ficam se parecendo com miniaturas. Isso acontece porque o tiltShift engana o plano de projeção do nosso olho, dando a impressão de que os objetos no foco da imagem são pequenos e que os objetos distorcidos são maiores, como é mostrado na figura a seguir:

image::print.png[]
